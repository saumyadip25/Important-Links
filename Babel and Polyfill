What is babel used for ?

Babel is a powerful and widely-used JavaScript compiler that has become an essential tool for developers. 
It allows developers to write modern JavaScript code and transpile it into a version that can run in all environments, 
including modern browsers and older ones.

* babel-loader — allows transpiling JavaScript files using babel and webpack. exposes a loader-builder utility that allows users to 
  add custom handling of Babel’s configuration for each file that it processes.
* @babel/preset-env — allows you to use the latest JavaScript without needing to micromanage which syntax transforms 
  (and optionally, browser polyfills) are needed by your target environment(s). This both makes your life easier and 
  JavaScript bundles smaller!
* @babel/core — core package
* @babel/plugin-transform-runtime — A plugin that enables the re-use of Babel’s injected helper code to save on code size.
* @babel/preset-react — use react preset when we are using Reactjs. Helps in converting html files to react based file.
* babel-eslint — parser that allows ESLint to run on source code that is transformed by Babel.
* @babel/runtime — package that contains a polyfill and many other things that Babel can reference.
* @babel/cli — command line interface to use babel.


What is a polyfill?

A polyfill allows you to use features that are not supported by a browser (or a specific browser version) by adding a fallback that 
mimics the desired behaviour using supported APIs. You can use a polyfill when you want to use a JavaScript feature like 
String.padEnd, which isn’t supported by older browsers.


By including a fallback for browsers that don’t support it yet, you can use such new features in development while still 
shipping code that is guaranteed to run on all browsers.
